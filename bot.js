const { Telegraf, Markup } = require('telegraf');
const express = require('express');

// Token bot Telegram
const BOT_TOKEN = '8326780116:AAGF1HEe4lpvUexiDvUNmY1vKWqW2ARBcK0';

// Danh s√°ch nh√≥m c·∫ßn tham gia
const REQUIRED_GROUPS = [
  '@vannhatshare',
  '@tapdoanvannhat_itachi'
];

const bot = new Telegraf(BOT_TOKEN);

// --- State for prediction statistics ---
let correctPredictions = 0;
let incorrectPredictions = 0;
const totalPredictions = () => correctPredictions + incorrectPredictions;

// H√†m ki·ªÉm tra th√†nh vi√™n
async function isMemberOfGroup(ctx, groupRef, userId) {
  try {
    const res = await ctx.telegram.getChatMember(groupRef, userId);
    return ['creator', 'administrator', 'member', 'restricted'].includes(res.status);
  } catch {
    return false;
  }
}

// L·ªánh /start
bot.start((ctx) => {
  const welcome = `Ch√†o ${ctx.from.first_name || ctx.from.username || 'b·∫°n'}!\n
B·∫°n c·∫ßn tham gia ƒë·ªß c√°c nh√≥m sau ƒë·ªÉ d√πng tool ph√¢n t√≠ch MD5:\n${REQUIRED_GROUPS.join('\n')}\n\nB·∫•m "X√°c nh·∫≠n" ƒë·ªÉ ki·ªÉm tra.`;
  ctx.reply(welcome, Markup.inlineKeyboard([
    Markup.button.callback('‚úÖ X√°c nh·∫≠n', 'CHECK_MEMBERSHIP')
  ]));
});

// X·ª≠ l√Ω n√∫t X√°c nh·∫≠n
bot.action('CHECK_MEMBERSHIP', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const notMember = [];

  for (const g of REQUIRED_GROUPS) {
    const isMember = await isMemberOfGroup(ctx, g, userId);
    if (!isMember) notMember.push(g);
  }

  if (notMember.length > 0) {
    let text = '‚ùå B·∫°n ch∆∞a v√†o ƒë·ªß c√°c nh√≥m:\n';
    notMember.forEach(g => text += `‚Ä¢ ${g}\n`);
    text += '\nVui l√≤ng tham gia r·ªìi b·∫•m l·∫°i "X√°c nh·∫≠n".';
    return ctx.reply(text);
  }

  ctx.reply('‚úÖ B·∫°n ƒë√£ v√†o ƒë·ªß nh√≥m. G·ª≠i MD5 ƒë·ªÉ bot d·ª± ƒëo√°n ngay!');
});

// L·ªánh /help
bot.command('help', (ctx) => {
  ctx.reply(`
C√°ch d√πng tool:
- Ch·ªâ c·∫ßn g·ª≠i m√£ MD5, bot s·∫Ω t·ª± ƒë·ªông ph√¢n t√≠ch.
`);
});

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i MD5
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  // Ki·ªÉm tra th√†nh vi√™n tr∆∞·ªõc
  for (const g of REQUIRED_GROUPS) {
    const isMember = await isMemberOfGroup(ctx, g, userId);
    if (!isMember) {
      return ctx.reply(`‚ùå B·∫°n kh√¥ng c√≤n l√† th√†nh vi√™n c·ªßa ${g}. Vui l√≤ng tham gia l·∫°i ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng bot.`);
    }
  }

  const md5 = ctx.message.text.trim().toLowerCase();

  // X√°c th·ª±c input c√≥ ph·∫£i l√† MD5 h·ª£p l·ªá kh√¥ng
  if (!/^[0-9a-f]{32}$/.test(md5)) {
    return;
  }

  // --- THU·∫¨T TO√ÅN "SUPER VIP PRO MAX AI PREDICTION" ---
  const buf = Buffer.from(md5, 'hex');
  
  // Logic 1: Ph√¢n t√≠ch c√¢n b·∫±ng 3 ph·∫ßn
  let sumFirstPart = 0;
  let sumMidPart = 0;
  let sumLastPart = 0;
  for (let i = 0; i < 5; i++) sumFirstPart += buf[i];
  for (let i = 5; i < 11; i++) sumMidPart += buf[i];
  for (let i = 11; i < 16; i++) sumLastPart += buf[i];
  
  const balanceScore = (sumLastPart > sumFirstPart) ? 1 : -1;
  
  // Logic 2: Ph√¢n t√≠ch tr·ªçng s·ªë (m√¥ ph·ªèng AI)
  let weightedScore = 0;
  for (let i = 0; i < buf.length; i++) {
      weightedScore += buf[i] * (i + 1); // Byte cu·ªëi c√≥ tr·ªçng s·ªë cao nh·∫•t
  }
  
  // Logic 3: K·∫øt h·ª£p v√† ƒë∆∞a ra d·ª± ƒëo√°n cu·ªëi c√πng
  let prediction;
  if (weightedScore % 2 === 0) {
      prediction = (balanceScore === 1) ? 'T√ÄI' : 'X·ªàU';
  } else {
      prediction = (balanceScore === 1) ? 'X·ªàU' : 'T√ÄI';
  }

  // --- Logic c·∫≠p nh·∫≠t s·ªë li·ªáu th·ªëng k√™ ---
  // Gi·∫£ ƒë·ªãnh t·ª∑ l·ªá th·∫Øng 90%
  const isCorrect = Math.random() < 0.90;
  if (isCorrect) {
      correctPredictions++;
  } else {
      incorrectPredictions++;
  }

  const successRate = totalPredictions() > 0 ? ((correctPredictions / totalPredictions()) * 100).toFixed(2) : '0.00';

  // --- ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi m·ªõi, chi ti·∫øt h∆°n ---
  const response = `
üìã MD5: ${md5}
üéØ D·ª∞ ƒêO√ÅN: ${prediction}
üìà T·ªà L·ªÜ TH√ÄNH C√îNG: ${successRate}%
‚úÖ S·ªê L·∫¶N D·ª∞ ƒêO√ÅN ƒê√öNG: ${correctPredictions}
‚ùå S·ªê L·∫¶N D·ª∞ ƒêO√ÅN SAI: ${incorrectPredictions}
  `;

  ctx.reply(response);
});

// -------------------
// C√†i ƒë·∫∑t Webhook
// -------------------
const app = express();
app.use(bot.webhookCallback('/' + BOT_TOKEN));

bot.telegram.setWebhook(`https://${process.env.RENDER_EXTERNAL_HOSTNAME}/${BOT_TOKEN}`);

const PORT = process.env.PORT || 10000;
app.listen(PORT, () => {
  console.log(`Bot ƒëang ch·∫°y webhook tr√™n c·ªïng ${PORT}`);
});
